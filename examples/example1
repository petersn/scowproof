
inductive nat : Set {
    O : nat;
    S : nat -> nat;
}

fixpoint plus (x y : nat) : nat {
    match x {
        nat::O => y;
        nat::S x' => plus x' (nat::S y);
    }
}

// Evaluate 2 + 2 into a normal form.
eval plus 2 2;

// The type of the induction principle on naturals.
let nat_ind_type :=
    forall (P : nat -> Prop),
        P nat::O ->
        (forall (n : nat), P n -> P (nat::S n)) ->
        forall (n : nat), P n;

// A proof of the above type.
let nat_ind :=
    fun
        (P : nat -> Prop)
        (base_case : P nat::O)
        (inductive_step : forall (n : nat), P n -> P (nat::S n))
    =>
        fix inductive_hypothesis (n : nat) : P n {
            match n as n' return P n' {
                nat::O => base_case;
                nat::S n' => inductive_step n' (inductive_hypothesis n');
            }
        };

check nat_ind : nat_ind_type;
