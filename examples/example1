
inductive nat : Set {
    O : nat;
    S : nat -> nat;
}

inductive False : Prop {}
inductive True : Prop { I : True }

fixpoint plus (x y : nat) : nat {
    match x {
        nat::O => y;
        nat::S x' => plus x' (nat::S y);
    }
}

infer nat;

infer plus;

/*
fixpoint zero (x : nat) : nat {
    match x {
        nat::O => 0;
        nat::S x' => zero x';
    }
}

let plus =
    fix plus (x : nat) : nat {
        fun (y : nat) =>
            match x {
                nat::O => y;
                nat::S x' => plus x' (nat::S y);
            }
    };

//eval zero 2;

eval plus 2 2;

infer Prop;

alphacanon match (fun x => x) {
    nat::S x => fix x (y : x) : x { fun z => x y };
    nat::O => x;
};

alphacanon match (fun x => x) {
    nat::S x => fix f (x : x) : x { fun z => x y f };
    nat::O => x;
};
*/

//eval plusUnfold 0;

/*
let pred (x : nat) =
    match x {
        nat::O => 0;
        nat::S x' => x';
    };

fixpoint zero (x : nat) : nat {
    match x {
        nat::O => 0;
        nat::S x' => zero x';
    }
}
*/

//eval pred 2;

//eval zero 1;

//eval ((fun x => x) (fun y => y y));

// Evaluate 2 + 2 into a normal form.
/*
eval (
    let x = 0 in match x {
        nat::O => x;
    }
);
*/

/*
// The type of the induction principle on naturals.
let nat_ind_type =
    forall (P : nat -> Prop),
        P nat::O ->
        (forall (n : nat), P n -> P (nat::S n)) ->
        forall (n : nat), P n;

// A proof of the above type.
let nat_ind =
    fun
        (P : nat -> Prop)
        (base_case : P nat::O)
        (inductive_step : forall (n : nat), P n -> P (nat::S n))
    =>
        fix inductive_hypothesis (n : nat) : P n {
            match n as n' return P n' {
                nat::O => base_case;
                nat::S n' => inductive_step n' (inductive_hypothesis n');
            }
        };

check nat_ind : nat_ind_type;
*/

let nat_ind_type =
    forall (P : nat -> Prop),
        P nat::O ->
        (forall (n : nat), P n -> P (nat::S n)) ->
        forall (n : nat), P n;

let nat_ind =
    fun
        (P : nat -> Prop)
        (base_case : P nat::O)
        (inductive_step : forall (n : nat), P n -> P (nat::S n))
    =>
        fix inductive_hypothesis (n : nat) : P n {
            match n return P n {
                nat::O => base_case;
                nat::S n' => inductive_step n' (inductive_hypothesis n');
            }
        };

infer nat_ind;
check nat_ind : nat_ind_type;
